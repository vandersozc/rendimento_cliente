package com.vandersoncamp.rendimento.business.validate;import com.vandersoncamp.rendimento.model.Cliente;import com.vandersoncamp.rendimento.model.Endereco;import com.vandersoncamp.rendimento.model.RiscoEnum;import com.vandersoncamp.rendimento.util.exception.BusinessException;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.*;public class ClienteValidateTest {    private Cliente getCliente() {        Cliente cliente = new Cliente();        cliente.setId(1L);        cliente.setNome("Teste 001");        cliente.setRendimentoMensal(BigDecimal.TEN);        cliente.setRisco(RiscoEnum.A);        cliente.setEnderecos(getEnderecos());        return cliente;    }    private List<Endereco> getEnderecos() {        Endereco endereco = new Endereco();        endereco.setId(1L);        endereco.setLogradouro("Rua 001");        endereco.setNumero(123L);        endereco.setBairro("Bairro 001");        endereco.setCep("88808430");        endereco.setCidade("Cidade 001");        endereco.setEstado("Estado 001");        endereco.setComplemento("Complemento");        List<Endereco> lista = new ArrayList<>();        lista.add(endereco);        return lista;    }    Cliente cliente = getCliente();    ClienteValidate validate = new ClienteValidate();    @Test    @DisplayName("Test 01")    public void TestValidate01() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            cliente.setNome(null);            validate.validate(cliente);        });        assertEquals("Não foi informado o nome do cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 02")    public void TestValidate02() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            cliente.setRendimentoMensal(null);            validate.validate(cliente);        });        assertEquals("Não foi informado o rendimento mensal do cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 03")    public void TestValidate03() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            cliente.setRisco(null);            validate.validate(cliente);        });        assertEquals("Não foi informado o grupo de risco do cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 04")    public void TestValidate04() {        cliente.setNome("Nome validate");        validate.validate(cliente);        assertNotNull(cliente.getNome());    }    @Test    @DisplayName("Test 05")    public void TestValidate05() {        cliente.setRendimentoMensal(BigDecimal.ONE);        validate.validate(cliente);        assertNotNull(cliente.getRendimentoMensal());    }    @Test    @DisplayName("Test 06")    public void TestValidate06() {        cliente.setRisco(RiscoEnum.A);        validate.validate(cliente);        assertNotNull(cliente.getRisco());    }    @Test    @DisplayName("Test 07")    public void TestValidate07() {        cliente.setRisco(RiscoEnum.B);        validate.validate(cliente);        assertNotNull(cliente.getRisco());    }    @Test    @DisplayName("Test 08")    public void TestValidate08() {        cliente.setRisco(RiscoEnum.C);        validate.validate(cliente);        assertNotNull(cliente.getRisco());    }    @Test    @DisplayName("Test 09")    public void TestValidate09() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            List<Endereco> list = new ArrayList<>();            cliente.setEnderecos(list);            validate.validate(cliente);        });        assertEquals("Não foi informado um endereço para o cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 10")    public void TestValidate10() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            List<Endereco> list = getEnderecos();            list.get(0).setLogradouro(null);            cliente.setEnderecos(list);            validate.validate(cliente);        });        assertEquals("Não foi informado o logradouro para o endereço do cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 11")    public void TestValidate11() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            List<Endereco> list = getEnderecos();            list.get(0).setNumero(null);            cliente.setEnderecos(list);            validate.validate(cliente);        });        assertEquals("Não foi informado o número para o endereço do cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 12")    public void TestValidate12() {        cliente.setEnderecos(getEnderecos());        validate.validate(cliente);        assertEquals(cliente.getEnderecos().size(), 1);    }}