package com.vandersoncamp.rendimento.business.validate;import com.vandersoncamp.rendimento.business.EmprestimoBO;import com.vandersoncamp.rendimento.model.Cliente;import com.vandersoncamp.rendimento.model.Endereco;import com.vandersoncamp.rendimento.model.RiscoEnum;import com.vandersoncamp.rendimento.util.exception.BusinessException;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.*;public class EmprestimoValidateTest {    private Cliente getCliente() {        Cliente cliente = new Cliente();        cliente.setId(1L);        cliente.setNome("Teste 002");        cliente.setRendimentoMensal(BigDecimal.TEN);        cliente.setRisco(RiscoEnum.A);        cliente.setEnderecos(getEnderecos());        return cliente;    }    private List<Endereco> getEnderecos() {        Endereco endereco = new Endereco();        endereco.setLogradouro("Rua 002");        endereco.setNumero(123L);        endereco.setBairro("Bairro 002");        endereco.setCep("88808430");        endereco.setCidade("Cidade 002");        endereco.setEstado("Estado 002");        endereco.setComplemento("Complemento");        List<Endereco> lista = new ArrayList<>();        lista.add(endereco);        return lista;    }    private EmprestimoBO getEmprestimo() {        EmprestimoBO emprestimo = new EmprestimoBO();        emprestimo.setCliente(getCliente());        emprestimo.setValorSolicitado(BigDecimal.TEN);        emprestimo.setMeses(2L);        return emprestimo;    }    EmprestimoBO emprestimo = getEmprestimo();    EmprestimoValidate validate = new EmprestimoValidate();    @Test    @DisplayName("Test 01")    public void TestValidate01() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            emprestimo.setValorSolicitado(null);            validate.validate(emprestimo);        });        assertEquals("Não foi informado o valor solicitado pelo cliente", thrown.getMessage());    }    @Test    @DisplayName("Test 02")    public void TestValidate02() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            emprestimo.setMeses(null);            validate.validate(emprestimo);        });        assertEquals("Não foi informada a quantidade de meses para cálculo da simulação", thrown.getMessage());    }    @Test    @DisplayName("Test 03")    public void TestValidate03() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            emprestimo.setCliente(null);            validate.validate(emprestimo);        });        assertEquals("Cliente não foi informado para cálculo do empréstimo", thrown.getMessage());    }    @Test    @DisplayName("Test 04")    public void TestValidate04() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            emprestimo.setMeses(-34L);            validate.validate(emprestimo);        });        assertEquals("Para o campo meses são permitidos somente números inteiros", thrown.getMessage());    }    @Test    @DisplayName("Test 05")    public void TestValidate05() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            emprestimo.setValorSolicitado(BigDecimal.ZERO);            validate.validate(emprestimo);        });        assertEquals("O valor solicitado deve ser maior que zero", thrown.getMessage());    }    @Test    @DisplayName("Test 06")    public void TestValidate06() {        BusinessException thrown = assertThrows(BusinessException.class, () -> {            emprestimo.setValorSolicitado(new BigDecimal("-1"));            validate.validate(emprestimo);        });        assertEquals("O valor solicitado deve ser maior que zero", thrown.getMessage());    }    @Test    @DisplayName("Test 07")    public void TestValidate07() {        emprestimo.setValorSolicitado(BigDecimal.TEN);        validate.validate(emprestimo);        assertNotNull(emprestimo.getValorSolicitado());    }    @Test    @DisplayName("Test 08")    public void TestValidate08() {        emprestimo.setMeses(2L);        validate.validate(emprestimo);        assertNotNull(emprestimo.getMeses());    }    @Test    @DisplayName("Test 09")    public void TestValidate09() {        emprestimo.setCliente(getCliente());        validate.validate(emprestimo);        assertNotNull(emprestimo.getCliente());    }}