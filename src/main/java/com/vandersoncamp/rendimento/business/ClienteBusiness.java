package com.vandersoncamp.rendimento.business;import com.vandersoncamp.rendimento.business.validate.ClienteValidate;import com.vandersoncamp.rendimento.business.validate.EmprestimoValidate;import com.vandersoncamp.rendimento.model.Cliente;import com.vandersoncamp.rendimento.service.ClienteService;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import java.math.BigDecimal;import java.util.List;/** * Classe de negócio do cliente, endereço e empréstimo. Responsável pelo tratamento de dados * @author vanderson.campanholi * Método find - Busca o cliente pelo identificador * Método findAll - Busca uma lista de clientes com filtro * Método create - Cria um novo cliente * Método update - Atualiza um cliente * Método delete - Remove um cliente * Método simulaValorImprestimo - SImuka um cálculo de empréstimo */@RequestScopedpublic class ClienteBusiness {    @Inject    private ClienteService service;    @Inject    private ClienteValidate clienteValidate;    @Inject    private EmprestimoValidate emprestimoValidate;    private static final Integer CEM = 100;    public Cliente find(Long id) {        return service.find(id);    }    public List<Cliente> findAll(String filterField, String filterData, String order) {        return service.findAll(filterField, filterData, order);    }    public Cliente create(Cliente cliente) {        clienteValidate.validate(cliente);        return service.create(cliente);    }    public Cliente update(Cliente cliente) {        clienteValidate.validate(cliente);        return service.update(cliente);    }    public void delete(Long id) {        service.delete(id);    }    public EmprestimoBO simulaValorImprestimo(EmprestimoBO emprestimo) {        EmprestimoBO bo = emprestimo;        emprestimoValidate.validate(emprestimo);        bo.setValorSimulacao(getValorEmprestimo(emprestimo));        return bo;    }    private BigDecimal getValorEmprestimo(EmprestimoBO emprestimo) {        BigDecimal valorSolicitado = BigDecimal.ZERO;        switch (emprestimo.getCliente().getRisco()) {            case A:                valorSolicitado = calculoValorSolicitado(new BigDecimal("1.9"), emprestimo);                break;            case B:                valorSolicitado = calculoValorSolicitado(new BigDecimal("5"), emprestimo);                break;            case C:                valorSolicitado = calculoValorSolicitado(new BigDecimal("10"), emprestimo);                break;        }        return valorSolicitado;    }    private BigDecimal calculoValorSolicitado(BigDecimal percentual, EmprestimoBO emprestimo) {        BigDecimal valorJuros = emprestimo.getValorSolicitado().multiply(percentual).divide(BigDecimal.valueOf(CEM));        BigDecimal valorJurosMensais = valorJuros.multiply(BigDecimal.valueOf(emprestimo.getMeses()));        return emprestimo.getValorSolicitado().add(valorJurosMensais);    }}